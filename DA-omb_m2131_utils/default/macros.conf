[m2131]
definition = `omb-m2131`
iseval = 0
description = Alias of `omb-m2131` for convenience

[omb-m2131]
definition = omb-m2131
iseval = 0
description = The name of the lookup that contains the extracted contents of the OMB M-21-31 pdf

[m2131-status]
definition = `omb-m2131-status`
iseval = 0
description = Alias of `omb-m2131-status` for convenience

[omb-m2131-status]
definition = omb-m2131-status-demo
iseval = 0
description = The name of the lookup used for tracking OMB M-21-31 compliance when only a single group needs to be tracked

[omb-m2131-link_to_status]
definition = ```lookup `omb-m2131` m2131_lookup_version, check_id```lookup `omb-m2131` check_id
iseval = 0
description = Links the currently shown OMB M-21-31 status lookup to the pdf

[m2131-link_to_status]
definition = `omb-m2131-link_to_status`
iseval = 0
description = Alias of `omb-m2131-link_to_status` for convenience

[omb-m2131-get_status]
definition = search earliest=-s index=_NULL_ \
| inputlookup append=true `omb-m2131-status`\
| `omb-m2131-link_to_status`
iseval = 0
description = 

[m2131-get_status]
definition = `omb-m2131-get_status`
iseval = 0
description = Alias of `omb-m2131-get_status` for convenience

[omb-m2131-link_to_status(1)]
args = lookup_definition
definition = lookup $lookup_definition$ m2131_lookup_version, check_id
iseval = 0
description = 

[m2131-link_to_status(1)]
args = lookup_definition
definition = `omb-m2131-link_to_status($lookup_definition$)`
iseval = 0
description = Alias of `omb-m2131-link_to_status` for convenience

[omb-m2131-status-fields]
definition = check_id, m2131_lookup_version, check-is_relevant, check-notes, coverage-data_collection_status, coverage-data_exists_elsewhere, coverage-data_in_siem, coverage-group_label, coverage-notes, coverage-point_of_contact, query, query-example_output, query-is_example, query-needs_review, query-notes, query-too_general
iseval = 0
description = 

[m2131-status-fields]
definition = `omb-m2131-status-fields`
iseval = 0
description = Alias of `omb-m2131-status-fields` for convenience

[z__omb-m2131-app_namespace]
definition = "DA-omb_m2131_utils"
iseval = 0

[parse_query(1)]
args = query
definition = rename $query$ AS target_query\
| stats \
    dc(check_id) AS check_id:dc\
    values(check_id) AS check_id\
    values(eval(coalesce(group, 'coverage-group_label'))) AS group\
    by target_query\
| streamstats c AS query-id\
| eval \
    ```Converts query to multivalue field```\
    query-snippet = split(replace(replace(target_query, "\s*\|\s*(\w+)", "<__|__>\1"), "^\s*<__\|__>", ""), "<__|__>"),\
    query-root = case(NOT match(trim(mvindex('query-snippet', 0)), "^\s*\|"), mvindex('query-snippet', 0))\
\
    ```Resolve chained evals```\
| eval\
    query-snippet-eval = mvfilter(match('query-snippet', "^eval\s")),\
    query-snippet = mvfilter(NOT match('query-snippet', "^eval\s")),\
```\
    query-snippet-eval = mvmap('query-snippet-eval', split(replace('query-snippet-eval', ",\s*(\"[^\"]+\"|[^\s=]+)(?=\s*=[^\)]+\s*(?:\w+\(|\"))", "<__|__>eval \1"), "<__|__>")),\
```\
    query-snippet-eval = mvmap('query-snippet-eval', split(replace('query-snippet-eval', ",\s*(\"[^\"]+\"|[^\s=]+)(?=\s*=[^\)]+\s*(?:\w+\(|\"[^\"]\"\.?|'[^']+'\.?))", "<__|__>eval \1"), "<__|__>")),\
\
    query-snippet = mvappend('query-snippet', 'query-snippet-eval')\
| fields - query-snippet-eval\
\
| stats \
    c AS query-snippet-count-l2\
    values(target_query) AS query-l2\
    dc(target_query) AS query-l2-dc\
    values(check_id) AS check_id-l2\
    values(group) AS group-l2\
    values(query-id) AS query-id-l2\
    values(query-root) AS query-root-l2\
    by query-snippet\
\
    ```Extract command```\
| eval query-snippet-command = replace('query-snippet', "^(\w+).+", "\1")\
    ```FIELD = value``` \
| rex field=query-snippet max_match=0 "(?<g1_criteria>(?<g1_field>[^'!=\s\(]+?)[\s'!]*=\s*\"?(?<g1_value>((?<=[\"])[^\"]*(?=\")|[^\s\)]+)))\s*"\
    ```eval target FIELD```\
| eval g1_field = if('query-snippet-command' = "eval", replace('query-snippet', "(?i)(?:eval)\s+(\"[^\"]+\"|[^\s=]+)(?=\s*=).+$", "\1"), g1_field)\
    ```fields/table command``` \
| rex field=query-snippet max_match=0 "(^|\s*\|)\s*(?:fields|table)\s+(?<g2_field>[^\-][^\|]*?)\s*(?:\||$)"\
    ```stats, eventstats, streamstats, chart, & timechart .. groupby/by FIELD```\
| rex field=query-snippet max_match=0 "(^|\s*\|)\s*(?<g3_cmd>(event|stream|time)?(stats|chart)\s+(?<g3_func>.+?)(?:\s+(?i)(?:(?:group)?by)\s(?<g3_field>[^\|]*?))?\s*(?:\||$))"\
    ```fields in aggregate functions```\
```CHECKPOINT: What about if there's a nested eval. This regex might partially solve it, but it might also require more parsing afterwards since it'll have if/case criteria and whatever else was in the eval ```\
| rex field=g3_func max_match=0 "\(\s*(?<g3_func_field>[^\)]+?)\s*\)"\
    ```tstats```\
| rex field=query-snippet max_match=0 "(?i)(?:tstats\s(?<g4_func>.*?)(?=\s*(?:(?:from|where|(?:group)?by)\s*|$))(?:\s+FROM\s+datamodel[\s=\"]+(?<g4_datamodel>[^\s\"]+)(?=\s*(?:(?:where|(?:group)?by)\s*|$)))?(?:\s+WHERE\s+(?<g4_criteria>.+?)(?=\s*(?:(?:group)?by\s*|$)))?(?:\s+(?:group)?by\s+(?<g4_field>.+?)(?:(?=\s+[^=\s+]+\s*=\s*\S+){1,}|\s*$))?)"\
| rex field=g4_func max_match=0 "\(\s*(?<g4_func_field>[^\)]+?)\s*\)"\
| rex field=g4_criteria max_match=0 "(?<g4_criteria_field>[^=\s\(]+)=\s*\"?(?<g4_criteria_value>((?<=[\"])[^\"]*(?=\")|[^\s\)]+))\s*"\
| rex field=g4_criteria max_match=0 "(\s+|^|\()nodename[\s=\"]+(?<g4_dataset>[^\s\"]+)"\
| eval g4_datamodel = if(isNotNull(g4_datamodel) AND isNotNull(g4_dataset), mvmap(g4_dataset, g4_datamodel.".".g4_dataset), g4_datamodel)\
| fields - g4_dataset\
    ```FIELD IN()```\
| rex field=query-snippet max_match=0 "(?<g5_criteria>(?<g5_field>[^=\s]+)\s+IN\s*\(\s*(?<g5_value>[^\)]+)\))\s*"\
    ```fields - FIELD```\
| rex field=query-snippet max_match=0 "(^|\s*\|)\s*(?:fields|table)\s+-\s+(?<g6_field>[^\|]*?)\s*(?:\||$)"\
\
| foreach *criteria*\
    [| eval all-criteria = mvdedup(if(isNull('all-criteria'), '<<FIELD>>', mvappend('all-criteria', '<<FIELD>>')))\
        ]\
```Get all values from specific fields in the criteria```\
| foreach index, sourcetype, host, source\
    [| eval \
        all-criteria-<<FIELD>> = mvfilter(match('all-criteria', "^\s*\"?<<FIELD>>\"?\s*(?i)(?:=|in\s*\()"))\
    | rex field=all-criteria-<<FIELD>> max_match=0 "(?<temp_field1>[^=\s]+)\s+IN\s*\(\s*(?<temp_value1>[^\)]+)\)\s*"\
    | rex field=all-criteria-<<FIELD>> max_match=0 "(?<temp_field2>[^=\s\(]+)=\s*\"?(?<temp_value2>((?<=[\"])[^\"]*(?=\")|[^\s\)]+))\s*"\
    | rename temp_* AS temp-<<FIELD>>-*\
    | eval all-value-<<FIELD>> = mvdedup(mvappend(split(replace('temp-<<FIELD>>-value1', "[,\s]+", "<__|__>"), "<__|__>"), 'temp-<<FIELD>>-value2'))\
    | fields - temp-<<FIELD>>-*\
        ]\
```/Get all values from specific fields in the criteria```\
```Get everything else```\
| foreach fieldstr=<<F1>> *_field, *_datamodel\
    [| foreach fieldstr=<<F2>> field, datamodel\
        [ | eval \
            <<F1>> = if(\
                match("<<F1>>", "_field$")\
                , if(\
                    mvcount('<<F1>>')>1\
                    , mvmap('<<F1>>', replace(replace(replace('<<F1>>', "\s*,\s*", "<__|__>"), "\"\s+(\w)", "<__|__>\1"), "(\w)\s+\"", "\1<__|__>"))\
                    , replace(replace(replace('<<F1>>', "\s*,\s*", "<__|__>"), "\"\s+(\w)", "<__|__>\1"), "(\w)\s+\"", "\1<__|__>"))\
                , '<<F1>>'),\
            <<F1>> = if(\
                match("<<F1>>", "_field$")\
                , if(\
                    mvcount('<<F1>>')>1\
                    , mvmap('<<F1>>', trim(trim(split('<<F1>>', "<__|__>"), "\"")))\
                    , trim(trim(split('<<F1>>', "<__|__>"), "\"")))\
                , '<<F1>>'),\
            all-<<F2>> = if(match("<<F1>>", "<<F2>>$"), mvdedup(if(isNull('all-<<F2>>'), '<<F1>>', mvappend('all-<<F2>>', '<<F1>>'))), 'all-<<F2>>')\
            ]\
        ]\
```/Get everything else```\
| eval \
    all-field-custom = mvfilter(NOT match('all-field', "^(?:index|sourcetype|host|source|splunk_server|eventtype|tag|datamodel|nodename|_.+)$")),\
    all-field-native = mvfilter(match('all-field', "^(?:index|sourcetype|host|source|splunk_server|eventtype|tag|datamodel|nodename|_.+)$")),\
    query-is_root = case(query == 'query-root', 1),\
    all-field-requested = case(isNull('query-is_root'), 'all-field'),\
    all-field-requested-custom = case(isNull('query-is_root'), 'all-field-custom')\
| fields query*, query-root, all*, *\
| fields check*, group*, query*, all*\
| rename *-l2 AS *-level_2, *l2-dc AS *level_2-dc, all-datamodel AS all-value-datamodel\
| foreach all-*\
    [| eval <<FIELD>> = mvfilter(NOT match('<<FIELD>>', "^\s*[^\w'\"\-]"))\
    | rex mode=sed field=<<FIELD>> "s/`{3}.*`{3}//g s/\s*[^\w'\"\-]\s*$//g"\
        ]\
| rename *-level_2 AS *-parsed, *level_2-dc AS *parsed-dc
iseval = 0

[parse_query]
definition = eval target_query = coalesce(query, search)\
| `parse_query(target_query)`
iseval = 0

[omb-m2131-fields]
definition = order, page, check_id, hierarchy, cisa_guidance_priority, event_logging_level, log_category-label, log_category, log_category-short, required_data_category, required_data, required_sub_data, required_data-check, required_sub_data-check, check, check_type, check_type-controversial, check_type-is_action, \
check-example, check-filter, format, retention, check-guid, check-has_example, check-has_file_path, check-has_filter, \
required_data-example, required_data-filter, required_data-guid, required_data-has_example, required_data-has_file_path, required_data-has_filter, \
required_sub_data-example, required_sub_data-filter, required_sub_data-guid, required_sub_data-has_example, required_sub_data-has_file_path, required_sub_data-has_filter, \
omb_id-legacy, guid_key, log_category-guid, required_data_category-guid, check_key, check_id-prev, \
check_last_updated, check_last_updated-epoch, \
m2131_lookup_last_updated, m2131_lookup_last_updated-epoch, \
m2131_lookup_version, m2131_lookup_version-compatibility, m2131_lookup_version-prev
iseval = 0

[m2131-fields]
definition = `omb-m2131-fields`
iseval = 0

[omb-m2131-fields-compact]
definition = `omb-m2131-fields-compact("")`
iseval = 0

[omb-m2131-fields-compact(1)]
args = additional_fields
definition = order, page, check_id, hierarchy, event_logging_level, log_category-label, log_category-short, log_category, required_data_category, required_data, required_sub_data, required_data-check, required_sub_data-check, check, check_type, check-example, check-filter, check_key, check_last_updated*, m2131_lookup_version $additional_fields$
iseval = 0

[m2131-fields-compact]
definition = `omb-m2131-fields-compact`
iseval = 0

[m2131-fields-compact(1)]
args = additional_fields
definition = `omb-m2131-fields-compact("$additional_fields$")`
iseval = 0

[z__omb-m2131-viz-objectset-check]
definition = where isNull(objectset)\
    | fields log_category, check, check_type, check_id, coverage-data_collection_status, coverage-data_in_siem, check-guid, query\
    | rename coverage-data_collection_status AS status-data, coverage-data_in_siem AS status-siem    \
    | stats \
        values(check-guid) AS check-guid\
        values(log_category) AS log_category\
        first(check_type) AS check_type\
        values(check_id) AS check_id-all\
        c(check_id) AS check_id-all:c\
        c(eval(case(lower('status-data') IN("y", "yes"), check_id))) AS check_id-status-data-y:c\
        c(eval(case(lower('status-data') IN("p", "partial"), check_id))) AS check_id-status-data-p:c\
        c(eval(case(NOT lower('status-data') IN("y", "yes", "p", "partial"), check_id))) AS check_id-status-data-n:c\
        c(eval(case(lower('status-siem') IN("y", "yes"), check_id))) AS check_id-status-siem-y:c\
        c(eval(case(lower('status-siem') IN("p", "partial"), check_id))) AS check_id-status-siem-p:c\
        c(eval(case(NOT lower('status-siem') IN("y", "yes", "p", "partial"), check_id))) AS check_id-status-siem-n:c\
        c(query) AS query:c\
        by check\
    | foreach data, siem\
        [| eval score-status-<<FIELD>> = ((coalesce('check_id-status-<<FIELD>>-y:c', 0)+(coalesce('check_id-status-<<FIELD>>-p:c', 0)/2))/'check_id-all:c')*100\
            ]\
    | eval \
        objectset = "check",\
        from = mvjoin('check-guid', ";"),\
        score-status-overall = avg('score-status-data', 'score-status-siem'),\
        score = case(\
            "dcs"=="dcs"\
            , 'score-status-data',\
            "dcs"=="dis"\
            , 'score-status-siem', \
            TRUE(), 'score-status-overall'\
            ),\
        node_name = check,\
        viz:type = if(lower(check_type) == "data", coalesce("file", "file-alt", "newspaper"), "font"),\
        viz:nodeText = " ",\
        viz:nodeTextColor = "#000000",\
        viz:nodeTextColor = "#D2D0CF",\
        viz:value = mvjoin('check_id-all', " / "),\
        viz:value = check,\
        viz:value = "Check (".check_type."): ".check,\
        viz:color = case(\
            ```\
            Light Blue: #56B4E9\
            Dark Turquoise: #009E73\
            Faded Yellow: #F0E442\
            Dull Orange: #D55E00\
            Dull Red: #B13232\
            Dark Sea Foam: #009E73\
            ```\
            "dcs" IN("query")\
            , case(\
                'query:c' == 0, "#BD1313",\
                'query:c' == 'check_id-all:c', "#009E73",\
                'query:c' != 'check_id-all:c', "#B9B032"\
                ), \
            "dcs" IN("overall", "dcs", "dis")\
            , case(\
              score == 100, "#56B4E9",\
              ``` Used for demos\
              score == 100, if(random() % 2 == 1, "#56B4E9", "#009E73"),\
              ```\
              score >= 90, "#009E73",\
              ```\
              score >= 80, "#F0E442",\
              score >= 80, "#DED33D",\
              score >= 0, "#B13232"\
              score >= 0, "#C13232"\
              ```\
              score >= 80, "#B9B032",\
              score >= 40, "#D55E00",\
              score >= 0, "#BD1313"\
              ),\
            TRUE(), "#000000")
iseval = 0

[z__omb-m2131-viz-objectset-log_category]
definition = where isNull(objectset)\
    | fields log_category, index, log_category-guid\
    | stats \
        values(log_category-guid) AS log_category-guid\
        first(index) AS index by log_category\
    | eval \
        objectset = "log_category",\
        node_name = log_category,\
        from = mvjoin('log_category-guid', ";"),\
        viz:nodeText = log_category,\
        viz:value = "Log Category: ".log_category,\
        viz:color = "#D2D0CF",\
        viz:type = case(\
                index == "antivirus", coalesce("spider", "user-secret"),\
                index == "application", "code",\
                index == "authentication", coalesce("id-badge", "ticket-alt"),\
                index == "cloud_aws", coalesce("aws", "cloud"),\
                index == "cloud_azure", coalesce("microsoft", "windows", "cloud"),\
                index == "cloud_environments", "cloud",\
                index == "cloud_gcp", coalesce("google", "cloud"),\
                index == "container", coalesce("cubes", "cube", "docker"),\
                index == "data_loss", coalesce("share-square", "share"),\
                index == "database", "database",\
                index == "email", "envelope",\
                index == "identity", coalesce("user", "id-badge", "user-check"),\
                index == "mainframes", "server",\
                index == "mobile", "mobile-alt",\
                index == "network_device", coalesce("network-wired", "ethernet"),\
                index == "network_traffic", "wifi",\
                index == "operating_systems", case(\
                    match(log_category, "(?i)(bsd)"), "linux",\
                    match(log_category, "(?i)(windows)"), "windows",\
                    match(log_category, "(?i)(mac)"), "apple",\
                    TRUE(), coalesce("tv", "laptop", "laptop-code")),\
                index == "pki", "certificate",\
                index == "privileged_identity", coalesce("user-graduate", "user"),\
                index == "system_configuration", coalesce("heartbeat", "laptop-medical", "laptop-code"),\
                index == "virtualization", coalesce("layer-group", "buffer"),\
                index == "vulnerability", coalesce("radiation", "radiation-alt"),\
                TRUE(), "question"),\
        loc = json_object(\
            "large", json_object(\
                "663D3F41-59F8-17D8-3692-3AAD60E5E5B1", json_object("x", -273, "y", 747)\
                , "Anti-Virus and Behavior-Based Malware Protection", json_object("x", -273, "y", 747)\
                , "1EE84598-259A-1ABB-42C1-D9A15468F6D5;6A045E82-4C06-9E16-60F1-44067B33F870", json_object("x", 90, "y", -858)\
                , "Application Level", json_object("x", 90, "y", -858)\
                , "3AD1485A-65EF-5F1D-7D71-BBC24E0466A4", json_object("x", -1522, "y", -661)\
                , "Authentication and Authorization", json_object("x", -1522, "y", -661)\
                , "62F22019-ACCE-604F-93E3-4F219952831F", json_object("x", 1756, "y", -42)\
                , "Cloud AWS", json_object("x", 1756, "y", -42)\
                , "21D16799-B3CB-F183-5207-69E2912E92E7", json_object("x", 1174, "y", -58)\
                , "Cloud Azure", json_object("x", 1174, "y", -58)\
                , "1B8ED4C0-8D78-3E16-3205-6B35D1E15164;23B86D45-143D-300D-C0AD-EC6A5F0EBF74", json_object("x", 841, "y", -521)\
                , "Cloud Environments", json_object("x", 841, "y", -521)\
                , "5B5556F6-3918-81BC-EA77-50E4B9CC5447", json_object("x", 1418, "y", 383)\
                , "Cloud GCP", json_object("x", 1418, "y", 383)\
                , "Container - Cluster/Pod Events", json_object("x", -1713, "y", -371)\
                , "110E8B4E-6CF1-3301-1C14-9A91642AF310;17BAD4A4-1C4C-CB3A-3496-DD63590658DD;2D2C051E-9FDA-A522-2FDD-F705EDA5DDB4;6C23F540-64A3-0D1E-553D-CE9131FBAA29;75030722-5056-7C5D-4A16-78AB752B41F8", json_object("x", -1170, "y", -977)\
                , "Container", json_object("x", -1170, "y", -977)\
                , "Container - Engine", json_object("x", -2334, "y", -569)\
                , "Container - Image", json_object("x", -2259, "y", -733)\
                , "Container - OS", json_object("x", -1170, "y", -977)\
                , "Container - Supply Chain", json_object("x", -2031, "y", -62)\
                , "3E3D83F8-2403-7816-9216-924758CB3FA3", json_object("x", 297, "y", 626)\
                , "Data Loss Prevention", json_object("x", 297, "y", 626)\
                , "5D813BDB-127A-D387-7A2D-54D1C604FA22", json_object("x", -1591, "y", 1246)\
                , "Database Level", json_object("x", -1591, "y", 1246)\
                , "4A74089B-2C6A-2A9C-7CEA-1BE311E23BD1;4F4119CC-D863-BDF6-BAB9-D2355B3BFFDC;632912D0-7D86-981A-54E6-534A5FF84155;6CB469A7-3E12-B8A4-1D77-CC1E677D06DF", json_object("x", 540, "y", 1055)\
                , "Email Filtering, Spam, and Phishing", json_object("x", 540, "y", 1055)\
                , "5291DC87-679D-86B0-73E4-ED66730D63DE", json_object("x", -417, "y", 1033)\
                , "Identity & Credential Management", json_object("x", -417, "y", 1033)\
                , "279E4F5D-3955-92C8-766F-513A70221CBF", json_object("x", -1900, "y", 1208)\
                , "Mainframes", json_object("x", -1900, "y", 1208)\
                , "4F221933-3A45-AE40-5DA6-E27D5303DCFF;743148AD-4E91-8049-22A6-1C8B625475CF", json_object("x", -1142, "y", 573)\
                , "Mobile", json_object("x", -1142, "y", 573)\
                , "1064F6D7-2CCE-BAB1-6EB4-759402364966;34ACA54B-5A88-CABC-7EC2-4A742EAE281F;4CB17FAC-102C-F376-333C-00B19E4D2097;7342C59E-3287-308A-217D-6BB7D10BA471;78C19458-22F3-158B-4572-72343C97E9D1;838A4695-F2FD-1751-B593-52A27D6F9133", json_object("x", 286, "y", 66)\
                , "Network Device Infrastructure", json_object("x", 286, "y", 66)\
                ```\
                , "740F9166-67C9-1A13-360B-26026C9DFE21", json_object("x", -2196, "y", 1195)\
                , "Network Traffic", json_object("x", -2196, "y", 1195)\
                ```\
                , "740F9166-67C9-1A13-360B-26026C9DFE21", json_object("x", 0, "y", 0)\
                , "Network Traffic", json_object("x", 0, "y", 0)\
                , "74A3E018-4669-6485-3408-CCF469E92FE2", json_object("x", -653, "y", -256)\
                , "Operating Systems - BSD", json_object("x", -653, "y", -256)\
                , "1E5FD9DB-2725-E879-2708-7F591098F884", json_object("x", -924, "y", -611)\
                , "Operating Systems - MACOS", json_object("x", -924, "y", -611)\
                , "Operating Systems - Windows Infrastructure and Operating Systems", json_object("x", -1098, "y", -252)\
                , "761C8705-1F81-0417-6200-54A1317E9FC3", json_object("x", -1098, "y", -252)\
                , "Operating Systems - Windows", json_object("x", -1098, "y", -252)\
                , "2E71C9D9-7548-B957-25EB-C1F6A21118BB", json_object("x", -1751, "y", 1186)\
                , "PKI Infrastructure", json_object("x", -1751, "y", 1186)\
                , "3C22DC0B-6FB2-B07B-2950-6FE42569A758", json_object("x", -724, "y", 1066)\
                , "Privileged Identity & Credential Management", json_object("x", -724, "y", 1066)\
                , "22AAB6CF-1A69-77B0-6FD2-6190412F1560;708E0CF5-8411-09AF-950C-D4625A63743E;7D79D3CC-45EA-AD45-197E-AD26EC2652D7", json_object("x", 108, "y", -331)\
                , "System Configuration and Performance", json_object("x", 108, "y", -331)\
                , "7B6DF7A6-2B70-2A19-170D-31F3B813BDA6", json_object("x", -407, "y", -913)\
                , "Virtualization System", json_object("x", -407, "y", -913)\
                , "31D433D3-236F-86C2-F0A1-3831FD62A3F3", json_object("x", -774, "y", 197)\
                , "Vulnerability Assessments", json_object("x", -774, "y", 197)\
                )\
            )
iseval = 0

[z__omb-m2131-viz-linkset-lc_to_c]
definition = where isNull(objectset) AND isNull(linkset)\
    | fields log_category, check, log_category-guid, check-guid\
    | eventstats \
        values(log_category-guid) AS log_category-guid:all\
        by log_category\
    | eventstats \
        values(check-guid) AS check-guid:all\
        by check\
    | foreach log_category, check\
        [ | eval <<FIELD>>-guid:all = mvjoin('<<FIELD>>-guid:all', ";")\
            ]\
    | stats\
        count AS count-checks\
        by log_category-guid:all, check-guid:all\
    | rename log_category-guid:all AS from, check-guid:all AS to\
    | eval \
        linkset = "lc_to_c",\
        viz:linkWidth = ('count-checks' % 10) + 1,\
        viz:linkColor = "#008080",\
        viz:linkColor = "#6F6F6F"
iseval = 0

[omb-m2131-normalize_status_lookup]
definition = foreach \
    check-is_relevant\
    query-needs_review, query-too_general\
    coverage-data_collection_status, coverage-data_exists_elsewhere, coverage-data_in_siem, query-is_example\
    [| eval <<FIELD>> = trim(upper(case(NOT match('<<FIELD>>', "^\s*$"), '<<FIELD>>')))\
        ]\
| eval check-is_relevant = if('check-is_relevant' IN("N", "NO"), "No", "Yes")\
| foreach query-is_example, query-needs_review, query-too_general\
    [| eval <<FIELD>> = case(\
        '<<FIELD>>' IN("Y", "YES"), "Yes"\
        , '<<FIELD>>' IN("N", "NO"), "No"\
        , 'check-is_relevant' == "No" OR '<<FIELD>>' IN("N/A", "NA"), "Not Applicable"\
        , isNull('<<FIELD>>') OR '<<FIELD>>' IN("?", "UNKNOWN"), "Unknown"\
        , TRUE(), "Unsupported Value")\
        ]\
| eval\
    coverage-data_collection_status = case(\
        match('coverage-data_collection_status', "^(HAVE )?(ALL )?DATA$"), "Y"\
        , 'coverage-data_collection_status' == "PARTIAL DATA", "P"\
        , 'coverage-data_collection_status' == "NO DATA", "N"\
        , 'coverage-data_collection_status' == "NOT APPLICABLE", "N/A"\
        , TRUE(), 'coverage-data_collection_status'),\
    coverage-data_in_siem = case(\
        match('coverage-data_in_siem', "^(DATA )?IN (SPLUNK|SIEM)$"), "Y"\
        , match('coverage-data_in_siem', "^(DATA )?NOT IN (SPLUNK|SIEM)$"), "N"\
        , 'coverage-data_in_siem' == "NOT APPLICABLE", "N/A",\
        TRUE(), 'coverage-data_in_siem')\
| foreach coverage-data_collection_status, coverage-data_exists_elsewhere, coverage-data_in_siem\
    [| eval <<FIELD>> = case(\
        isNull('<<FIELD>>') OR '<<FIELD>>' IN("N", "NO"), "No"\
        , '<<FIELD>>' IN("Y", "YES"), "Yes"\
        , '<<FIELD>>' IN("P", "PARTIAL"), "Partial"\
        , 'check-is_relevant' == "No" OR '<<FIELD>>' IN("N/A", "NA"), "Not Applicable"\
        , '<<FIELD>>' IN("?", "UNKNOWN"), "Unknown"\
        , TRUE(), "Unsupported Value")\
        ]
iseval = 0

[m2131-normalize_status_lookup]
definition = `omb-m2131-normalize_status_lookup`
iseval = 0

[z__omb-m2131-macros-schema]
definition = makeresults \
| eval data = mvappend(\
    json_object("macro", "omb-m2131", \
        "alias", "m2131", \
        "example", "| inputlookup @omb-m2131@",\
        "description", "References the PDF lookup definition. This is used by the dashboards. If the PDF lookup is ever cloned and customized, then this needs to be updated to reference to the customized lookup definition."),\
    json_object("macro", "omb-m2131-fields", \
        "alias", "m2131-fields", \
        "example", "| inputlookup @omb-m2131@ | fields @omb-m2131-fields@",\
        "description", "All of the fields in the PDF lookup. This exists so users won't have to specify all of the fields in the same order every time. It also allows for more quickly referencing all of the relevant fields for removal or using in a foreach command. The latter is very helpful when a user needs to rename all of the PDF lookup fields, but only those fields."),\
    json_object("macro", "omb-m2131-fields-compact", \
        "alias", "m2131-fields-compact", \
        "example", "| inputlookup @omb-m2131@ | fields @omb-m2131-fields-compact@",\
        "description", "The more commonly used fields from the PDF lookup."),\
    json_object("macro", "omb-m2131-fields-compact(1)", \
        "alias", "m2131-fields-compact(1)", \
        "example", "| inputlookup @omb-m2131@ | fields @omb-m2131-fields-compact(\"omb_id-legacy, guid_key\")@",\
        "description", "Contains all of the commonly used fields from the PDF lookup, but gives the ability to specify additional fields."),\
    json_object("macro", "omb-m2131-get_status", \
        "alias", "m2131-get_status", \
        "example", "@omb-m2131-get_status@",\
        "description", "Only applicable when the default status lookup is being used. It give the ability to automatically pull in the status lookup and link it to the PDF lookup without having to do anything else."),\
    json_object("macro", "omb-m2131-link_to_status", \
        "alias", "m2131-link_to_status", \
        "example", "| inputlookup @omb-m2131-status@ | @omb-m2131-link_to_status@",\
        "description", "Allows the user to link the status lookup to the PDF lookup, without having to worry about the logic required to link them."),\
    json_object("macro", "omb-m2131-link_to_status(1)", \
        "alias", "m2131-link_to_status(1)", \
        "example", "| inputlookup @omb-m2131@ | fields @omb-m2131-fields@ | @omb-m2131-link_to_status(@omb-m2131-status@)@",\
        "description", "Allows the user to link any of the lookups to each other by specifying the lookup that should be linked, as the argument. With this, 1) a status lookup can be linked to another status lookup, 2) PDF lookup fields can be added to the results from a status lookup, or 3) Fields from an older PDF lookup can be added to the results from a status lookup."),\
    json_object("macro", "omb-m2131-normalize_status_lookup", \
        "alias", "m2131-normalize_status_lookup", \
        "example", "| inputlookup @omb-m2131-status@ | @omb-m2131-normalize_status_lookup@",\
        "description", "Used in conjunction with the data from the status lookup. It normalizes the contents of the relevant fields so they can more confidently be used for analysis."),\
    json_object("macro", "omb-m2131-status", \
        "alias", "m2131-status", \
        "example", "| inputlookup @omb-m2131-status@",\
        "description", "The default status lookup that's used for tracking."),\
    json_object("macro", "omb-m2131-status-all", \
        "alias", "N/A", \
        "example", "N/A",\
        "description", "This is only meant to be used as a dropdown option in the dashboards of this app. It is created and updated automatically by the search command that generates the status lookup. It contains references to all of the status lookup definitions that are generated with that command. It is for usage in the various dashboards in this app."),\
    json_object("macro", "omb-m2131-status-fields", \
        "alias", "m2131-status-fields", \
        "example", "| inputlookup @omb-m2131-status@ | fields @omb-m2131-status-fields@",\
        "description", "All of the fields in the status lookup. This exists so users won't have to specify all of the fields in the same order every time. It also allows for more quickly referencing all of the relevant fields for removal or using in a foreach command. The latter is very helpful when a user needs to rename all of the status lookup fields, but only those fields."),\
    json_object("macro", "parse_query", \
        "alias", "N/A", \
        "example", "| inputlookup @omb-m2131-status@ | @parse_query@",\
        "description", "Does NOT support parsing SPL2 queries. When a field called 'query' or 'search' exists in the results, then it will extract various components from the query in that field. It will first look for the field 'query' and only process that field. If 'query' doesn't exist, then it will process the field 'search'. It's not meant to be 100% accurate due to the insane possibilities of how queries can be structured, but it's great for general purpose analysis of queries."),\
    json_object("macro", "parse_query(1)", \
        "alias", "N/A", \
        "example", "| rest splunk_server=local /servicesNS/-/-/admin/macros | fields title, definition | sort title | @parse_query(definition)@ | rename *level_2 AS * | fields query-id, query, query-snippet, all*",\
        "description", "Does NOT support parsing SPL2 queries. Operates in the same fashion as its counterpart, except it allows the user to specify which field to process. The 'parse_query*' macros are one of the many hidden gems in this app. They have so much more versatility outside of M-21-31 that I decided to exclude the 'omb-m2131-' prefix from the name in order to make them more intuitive and easier to use outside of the app."),\
    json_object("macro", "z__omb-m2131-*", \
        "alias", "N/A", \
        "example", "N/A",\
        "description", "These are required for the dashboards to work properly and are not meant for general usage. They exist because the SPL is or was planned on being used in multiple places. It's easier to maintain it all when it's in a single place. Modifying them will break the functionality of various dashboards in the app."),\
    json_object("macro", "omb-m2131-upgrade_status_lookup-from_123-to_140", \
        "alias", "N/A", \
        "example", "| makeresults ```| `omb-m2131-upgrade_status_lookup-from_123-to_140` ```",\
        "description", "The example is commented in order to prevent any possible corruption of the m2131-status lookup. This is used to upgrade the m2131-status lookup from version 1.2.3 to 1.4.0. If it fails, then the m2131-status lookup was not upgraded. If it runs successfully, then the a backup will be created of the m2131-status lookup before it is upgraded."),\
    json_object("macro", "omb-m2131-upgrade_status_lookup-from_123-to_140(1)", \
        "alias", "N/A", \
        "example", "| makeresults ```| `omb-m2131-upgrade_status_lookup-from_123-to_140(m2131-status-demo)` ```",\
        "description", "The example is commented in order to prevent any possible corruption of the status lookup. This operates in the same way as the `omb-m2131-upgrade_status_lookup-from_123-to_140` macro, but it allows the user to specify a different status lookup.")\
    )\
| mvexpand data\
| spath input=data\
| fields - _time, data\
| fields macro, alias, example, description\
| rex mode=sed field=example "s/@/`/g"
iseval = 0

[z__omb-m2131-schema]
definition = makeresults \
| eval data = mvappend(\
    json_object("field", "check", \
    "description", "A one-stop-shop field for referencing what the compliance check is for this line item. It references the most granular check info by first pulling from 'required_sub_data'. If 'required_sub_data' is empty, then it pulls from 'required_data'."),\
    json_object("field", "check-example", \
    "description", "If the check has examples mentioned in the OMB M-21-31 PDF, then this lists them.",\
    "group", "example"),\
    json_object("field", "check-filter", \
    "description", "If the check provides details in the OMB M-21-31 PDF regarding what types of values/events should be collected, then this lists them.",\
    "group", "filter"),\
    json_object("field", "check-guid", \
    "description", "A unique reference to this exact check."),\
    json_object("field", "check-has_example", \
    "description", "Whether or not the check has examples available for reference in the OMB M-21-31 PDF.",\
    "group", "has_example"),\
    json_object("field", "check-has_file_path",\
    "description", "Whether or no the check has a file path available for reference in the OMB M-21-31 PDF.",\
    "group", "has_file_path"),\
    json_object("field", "check-has_filter",\
    "description", "Whether or no the check has a filter available for reference in the OMB M-21-31 PDF.",\
    "group", "has_filter"),\
    json_object("field", "check_id",\
    "description", "A unique id for this particular check. The 'check_guid' could also be used, but GUIDs aren't as easily recognizable as something like this. Think of it this way. The 'check_guid' is to IP, as the 'check_id' is to DNS. The 'check_id' has considerably more context. Here is the breakdown: '<Event Logging Level (ELL)>.<Log Category (LC) Abbreviation>.<Order within the prefixed ELL & LC>'"),\
    json_object("field", "check_id-prev",\
    "description", "What the 'check_id' value was in the previous version of this lookup. This exists so it'll be easier to transition to the latest version of this lookup, in the event the checks are updated in a way that causes the 'check_id' values to be changed, and should be used in conjuction with the field 'm2131_lookup_version-prev'."),\
    json_object("field", "check_key",\
    "description", "A multivalue field that contains values meant to specifically reference this particular check (e.g., the 'check-guid', 'check_id', and 'omb_id-legacy')."),\
    json_object("field", "check_last_updated",\
    "description", "The latest timestamp, in ISO-8601 format, of when any values in the lookup that are related to the check, were last updated."),\
    json_object("field", "check_last_updated-epoch",\
    "description", "The same timestamp used in 'check_last_updated', but in epoch format."),\
    json_object("field", "check_type",\
    "description", "Whether or not the check is meant to be interpreted as a field within an event, or a general description of the data source to be collected."),\
    json_object("field", "check_type-controversial",\
    "description", "Whether or not the check sparked debate due to vagueness, being non-intuitive, poorly detailed, etc."),\
    json_object("field", "check_type-is_action",\
    "description", "Whether or not the check was described more along the lines of a requested action, as opposed to a specific data source or field within it."),\
\
    json_object("field", "m2131_lookup_last_updated",\
    "description", "The latest timestamp, in ISO-8601 format, of when anything in the lookup was last updated."),\
    json_object("field", "m2131_lookup_last_updated-epoch",\
    "description", "The same timestamp used in 'm2131_lookup_last_updated', but in epoch format."),\
    json_object("field", "m2131_lookup_version",\
    "description", "The current version of the OMB M-21-31 lookup."),\
    json_object("field", "m2131_lookup_version-prev",\
    "description", "The previous version of the OMB M-21-31 lookup. This exists so it'll be easier to transition to the latest version of this lookup, and may need to be used in conjuction with the field 'check_id-prev'."),\
    json_object("field", "m2131_lookup_version-compatibility",\
    "description", "The lowest '<major>.<minor>' version of the lookup that is compatible with the current lookup. When a check is removed, added, or modified in a significant way, then this will be updated match the latest version that incorporated the change. This field and 'check_id' should be used in conjunction when linking to a 'omb-m2131-status' lookup."),\
\
    json_object("field", "guid_key",\
    "description", "A multivalue field of all GUIDs from all GUID-specific fields for this check."),\
    json_object("field", "omb_id-legacy",\
    "description", "The ID used in various other dashboards and apps that were released shortly after OMB M-21-31. It's included in order to help anyone transition their progress thus far, in the event they're using the older system."),\
    json_object("field", "order",\
    "description", "The order of how the checks appear in the OMB M-21-31 PDF. This field helps maintain all of the checks in the order they would appear in the OMB M-21-31 PDF."),\
    json_object("field", "page",\
    "description", "The page on which the check appears in the OMB M-21-31 PDF."),\
    json_object("field", "format",\
    "description", "The format(s) listed in the OMB M-21-31 PDF alongside the check."),\
    json_object("field", "retention",\
    "description", "The retention listed in the OMB M-21-31 PDF alongside the check."),\
    json_object("field", "hierarchy",\
    "description", "A consolidated breadcrumb trail from the 'event_logging_level' down to the 'check'."),\
    json_object("field", "cisa_guidance_priority",\
    "description", "Refers to the corresponding priority listed in the supplemental guidance provided by CISA in the PDF 'Guidance for Implementing M-21-31' (link in 'Resources' dropdown)."),\
\
    json_object("field", "event_logging_level",\
    "description", "The 'Event Logging Level' used in the OMB M-21-31 PDF."),\
    json_object("field", "log_category",\
    "description", "The 'Log Category' used in the OMB M-21-31 PDF."),\
    json_object("field", "log_category-label",\
    "description", "The more concise version of the 'Log Category' that considerably reduces formatting issues due to length."),\
    json_object("field", "log_category-guid",\
    "description", "The GUID that references this specific 'event_logging_level'+'log_category' combination."),\
    json_object("field", "log_category-short",\
    "description", "The abbreviation/acronym for the 'Log Category' for ease of reference."),\
\
    json_object("field", "required_data_category",\
    "description", "If the 'Required Data' column in the OMB M-21-31 has bolded text that categorizes the line items in that column, then that bolded text is considered the 'Required Data Category'."),\
    json_object("field", "required_data_category-guid",\
    "description", "The GUID that references this specific 'event_logging_level'+'log_category'+'required_data_category' combination."),\
\
    json_object("field", "required_data",\
    "description", "The text as it appears in the first level of the, generally, non-bolded information in the 'Required Data' column of the OMB M-21-31 PDF."),\
    json_object("field", "required_data-check",\
    "description", "The same data as 'required_data', unless it contains two or more line items that should be considered different line items. In which case, each line item is extracted and split into separate checks, as needed. This is one of the fields that can potentially be the same as the 'check' field, since this field is if 'required_sub_data-check' is empty."),\
    json_object("field", "required_data-guid",\
    "description", "The GUID that references this specific 'event_logging_level'+'log_category'+'required_data_category'+'required_data' combination."),\
    json_object("field", "required_data-has_example",\
    "group", "has_example"),\
    json_object("field", "required_data-example",\
    "group", "example"),\
    json_object("field", "required_data-has_file_path",\
    "group", "has_file_path"),\
    json_object("field", "required_data-has_filter",\
    "group", "has_filter"),\
    json_object("field", "required_data-filter",\
    "group", "filter"),\
\
    json_object("field", "required_sub_data",\
    "description", "The text as it appears in the more granular levels of the information in the 'Required Data' column of the OMB M-21-31 PDF."),\
    json_object("field", "required_sub_data-check",\
    "description", "The same data as 'required_sub_data', unless it contains two or more line items that should be considered different line items. In which case, each line item is extracted and split into separate checks, as needed. This is one of the fields that can potentially be the same as the 'check' field, unless it's empty."),\
    json_object("field", "required_sub_data-guid",\
    "description", "The GUID that references this specific 'event_logging_level'+'log_category'+'required_data_category'+'required_data-check'+'required_sub_data-check' combination."),\
    json_object("field", "required_sub_data-has_example",\
    "group", "has_example"),\
    json_object("field", "required_sub_data-example",\
    "group", "example"),\
    json_object("field", "required_sub_data-has_file_path",\
    "group", "has_file_path"),\
    json_object("field", "required_sub_data-has_filter",\
    "group", "has_filter"),\
    json_object("field", "required_sub_data-filter",\
    "group", "filter")\
    ) \
| mvexpand data \
| spath input=data \
| fields - _time, data \
| eventstats first(description) AS description by group\
| fields - group\
| fields field, description, *
iseval = 0

[z__omb-m2131-status-schema]
definition = makeresults \
| eval data = mvappend(\
    json_object("field", "check-is_relevant", \
        "allowed_values", "Yes, Y, No, N, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "Yes",\
        "description", "Whether or not the check is relevant to your organization."),\
    json_object("field", "check-notes", \
        "allowed_values", "<Any>",\
        "can_be_null", "Yes",\
        "default_value", "<None>",\
        "description", "Any notes that are specific to the check itself."),\
    json_object("field", "coverage-data_collection_status", \
        "allowed_values", "Yes, Y, No, N, Partial, P, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "No",\
        "description", "Whether or not all relevant data is being collected."),\
    json_object("field", "coverage-data_in_siem", \
        "allowed_values", "Yes, Y, No, N, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "No",\
        "description", "Whether or not all relevant data is available within the organization's SIEM. This field corresponds to 'Data Availability Status' and 'In_Splunk' in the Breakdown dashboard."),\
    json_object("field", "coverage-group_label", \
        "allowed_values", "<Any>",\
        "default_value", "<None>",\
        "can_be_null", "Yes",\
        "description", "The display label used to annotate the group associated with the data in this lookup file."),\
    json_object("field", "coverage-notes", \
        "allowed_values", "<Any>",\
        "default_value", "<None>",\
        "can_be_null", "Yes",\
        "description", "Any notes that are specific to the coverage status."),\
    json_object("field", "coverage-data_exists_elsewhere", \
        "allowed_values", "Yes, Y, No, N, Partial, P, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "No",\
        "description", "Whether or not all relevant data is being collected, but is either not collected by the organization's SIEM or is just not currently accessible by the SIEM."),\
    json_object("field", "coverage-point_of_contact", \
        "allowed_values", "<Any>",\
        "can_be_null", "Yes",\
        "default_value", "<None>",\
        "description", "The users/teams who are the points of contact for this check."),\
    json_object("field", "m2131_lookup_version", \
        "description", "Do NOT directly modify this field unless you know exactly how it affects every knowledge object that utilizes this lookup. Otherwise, there is a high risk of breaking critical correlations and dashboard usability.",\
        "notes", "DO NOT MODIFY"),\
    json_object("field", "m2131_lookup_version-compatibility", \
        "description", "Do NOT directly modify this field unless you know exactly how it affects every knowledge object that utilizes this lookup. Otherwise, there is a high risk of breaking critical correlations and dashboard usability.",\
        "notes", "DO NOT MODIFY"),\
    json_object("field", "check_id", \
        "description", "Do NOT directly modify this field unless you know exactly how it affect every knowledge object that utilizes this lookup. Otherwise, there is a high risk of breaking critical correlations.",\
        "notes", "DO NOT MODIFY"),\
    json_object("field", "query", \
        "allowed_values", "<Any>",\
        "can_be_null", "Yes",\
        "default_value", "<None>",\
        "description", "The query used to find the data within the organization's SIEM."),\
    json_object("field", "query-example_output", \
        "allowed_values", "<Any>",\
        "can_be_null", "Yes",\
        "default_value", "<None>",\
        "description", "An example event from the organization's own data, for reference in various other use cases."),\
    json_object("field", "query-is_example", \
        "allowed_values", "Yes, Y, No, N, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "No",\
        "description", "Whether or not the query can be used as-is to prove full compliance."),\
    json_object("field", "query-needs_review", \
        "allowed_values", "Yes, Y, No, N, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "Unknown",\
        "description", "Whether or not the query will need to be revisited and refined at a later date."),\
    json_object("field", "query-too_general", \
        "allowed_values", "Yes, Y, No, N, N/A, NA, Unknown, ?",\
        "can_be_null", "Yes",\
        "default_value", "Unknown",\
        "description", "Used for when the query will return data, but the actual targeted data is buried in all of the logs. If this is the case, then refining the query will make it more effective for configurations and efficient for audit requets."),\
    json_object("field", "query-notes", \
        "allowed_values", "<Any>",\
        "can_be_null", "Yes",\
        "default_value", "<None>",\
        "description", "Any notes that are specific to the query and/or its results.")\
    )\
| mvexpand data\
| spath input=data\
| fields - _time, data\
| fields field, allowed_values, can_be_null, default_value, description, notes, *
iseval = 0

[omb-m2131-upgrade_status_lookup-from_123-to_140(1)]
args = lookup_definition
definition = inputlookup $lookup_definition$\
| where m2131_lookup_version="1.2.3"\
| require\
| outputlookup createinapp=true $lookup_definition$-backup-v1.2.3.csv.gz\
| search NOT check_id IN("1.Virt.6-2", "2.Con-OS.7-3", "2.Con-OS.7-4")\
| eval \
    check_id = if(check_id = "1.Virt.6-1", "1.Virt.6", check_id),\
    update_state = case(match(check_id, "2.Con-OS\."), "fix")\
| appendpipe\
    [| search update_state = "fix"\
    | rex field=check_id "^(?<check_id_prefix>\d\.[^\.]+\.)(?<check_id_num>\d+)(?<check_id_suffix>-\d+)?$" \
    | eval \
        check_id_new_num = case(match(check_id, "2.Con-OS\.") AND check_id_num >= 15, check_id_num+1),\
        check_id_new = if(isNotNull(check_id_new_num), check_id_prefix.check_id_new_num.coalesce(check_id_suffix, ""), check_id),\
        check_id_new = if(check_id_new == "2.Con-OS.14-2", "2.Con-OS.15", check_id_new),\
        check_id = check_id_new,\
        check_id = if(check_id="2.Con-OS.14-1", mvappend("2.Con-OS.14-1", "2.Con-OS.14-2"), check_id),\
        update_state = "fixed"\
    | fields - check_id_*\
    | mvexpand check_id\
        ]\
| where isNull(update_state) OR update_state="fixed"\
| fields - update_state\
| eval \
    m2131_lookup_version = "1.4.0",\
    m2131_lookup_version-compatibility = "1.4"\
| outputlookup $lookup_definition$
iseval = 0

[omb-m2131-upgrade_status_lookup-from_123-to_140]
definition = `omb-m2131-upgrade_status_lookup-from_123-to_140(omb-m2131-status)`
iseval = 0

